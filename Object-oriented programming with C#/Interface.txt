using System;

/* 
- Interface acts as a middle layer for two modules of code for communication, it enforces some rules of communication between 1 part of code (modeuleX) and another part of the code (moduleY).
- One module of code acts as a provider who implements the interfaces and one module of code acts as a consumer who uses the interfaces to use the functionality. A Interface acts as a guy in middle. 

-Interfaces implements strict rules of communication for both provider, and consumer modules of code. 

- Interfaces are used for pure abstraction, they do not contain any non-abstract function like abstract class ("classes having some common business logic") in it. Abstract classes also provides abstraction but of lower level than the interfaces. The abstract classes can have both abstract and non abstract methods because abstract classes not made to provide 100% abstraction level like interfaces, we have scenarios where we define some methods as abstract and in some methods we define our business logic in those scenarios we make abstract classes.
for e.g

Animal (interface)   <-- highest level of abstraction
Birds, Insects etc   <-- middle level of abstraction(abstract classes, here we define/implement business logic of common functionalities and let other uncommon functions as it is, only few functions are abstract and some functions have business logic defined)

Ant, Parrot, Pigeon etc (concrete class, here we define all the uncommon functionalities that were left in abstract classes)

- if there exist a abstract class that has all the member functions --> abstract then instead of making abstract class one should make interfaces because abstract classes are made only when "we want to implement some common business logic of the concrete main child classes in parent classes"

- Interfaces are the highest level of abstraction in an application, they support multiple inheritance to solve complex abstraction problems for e.g
   There are 4 interfaces 
   1. Calculator Interface (Parent of simple calculator interface and scientific calculator interface that has some common abstract functions)
   2. Simple Calculator Interface ( child of base Calculator Interface that has some different abstract functions )
   3. Scientific Calculator Interface  ( child of base Calculator Interface that has some different abstract functions )
   4. Programming Calculator Interface ( This Interface requires all the calculator interfaces abstract functions to implement )

all these above mentioned interfaces are required, the calculator interface was need for simple and scientific calculator interface and programming calculator interface required simple, and scientific calculator interfaces. "We cannot directly make another interface having all the functions that programming calculator interface requires because there will be no reusability. The interfaces solves these complex abstraction problems by allowing multiple inheritance.

- no access modifiers are needed for function declaration inside interface, everything inside a interface is public by default in interface but we cannot even use public keyword. We do not use any access modifier for any member function of a interface. "ONLY METHOD SIGNATURE IS NEEDED"          
for e.g   void abc () {}

- An interface may not declare instance data such as fields, auto-implemented properties, or property-like events (MSDN DOCUMENTATION)for e.g
int abc; (not allowed)

- if we have two interfaces A, and B. IF both these interface has some common method names and if there exist a child class that do multiple inheritance of these two interfaces and if we implement that method having common name in these two interfaces, then there will be no error and if we call this method from interface reference variables of both of these interfaces, then there will be no error but what if we need a separate implementation of this common name function for both the interfacess, for that we will define the function in child class with the following syntax,

void first_interface_name.<common_function_name> { }
void second_interface_name.<common_function_name> { }


- abstract classes are used to implement "some common business logic" of child/concrete classes to avoid redundant/duplicate code.

- only the common business logic will be implemented inside the abstract class and non common functionality will act as abstract methods in aprent abstract base class.
- if we define common functionality of child classes in a "non abstract parent class", then we can not stop the user from objects creation of the base class. The base class object/instance creation should not be allowed. Another problem is that we will have to define some "virtual methods" in that non abstract base/parent class, these virtual methods will act as "uncommon" functionality of the child classes that is why they are created as virtual methods so that each virtual method should be overriden by its child classes (cross calling) so that respective child class uncommon methods can be called from the instances.


- abstract classes solves both the above mentioned problems and reduces code maintainability, make the classes decoupled.


- abstract classes requires abstract keyword before class keyword during declaration.


- abstract classes can have field attributes


- abstract classes requires abstract keyword for abstract methods declaration but interfaces do not require abstract keyword for declaring abstract methods.
  for e.g
   public abstract void abc();


- if a non abstract class inherits a abstract class then it is the duty of the child class to implement the abstract methods of the parent abstract class otherwise the child class will also become an abstract class and its instance cannot be created.
- abstract classes does not support multiple inheritance of classes 
but, "they support multiple inheritance of interfaces".

- an abstract class "may" contain abstract methods/functions but not mandatory to have an abstract method/function.

- Instances of abstract classes and interfaces are not allowed but we can make object reference variables of interfaces and those ref variables of interfaces can point to instances of the classes who implements that interface.

- A sealed class cannot be used as a base class or parent class therefore an abstract class cannot be a sealed class because it has some abstract methods that should be implemented by the child classes but sealed classes have no child classes.


*/

namespace Test
{
    public interface A
    {
        int sum(int x, int y); // by default every method is public in interfaces
    }

    public interface B
    {
        int product(int x, int y);
    }
    public class First:A,B
    {
        public int sum(int x, int y)
        {
            return x + y;
        }
        public int product(int x, int y)
        {
            return x * y;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            First Obj = new First();
            A RefA = Obj;
            B RefB = Obj;
            Console.WriteLine("Sum = {0}", RefA.sum(5, 10));
            /*Console.WriteLine("Sum = {0}", RefA.product(5, 10)); 
              can't be called because calling through reference of Interface A
              Similarly , Console.WriteLine("Sum = {0}", RefB.sum(5, 10)); */
            Console.WriteLine("Sum = {0}", RefB.product(5, 10));
            Console.WriteLine("Sum = {0}", Obj.sum(5, 10));
            Console.WriteLine("Sum = {0}", Obj.sum(5, 10));

        }
    }
}










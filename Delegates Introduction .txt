using System;

namespace Delegates
{
    
    /* 
     - A delegate is like a representator of a group.
     - Type safe, provide a late binding mechanism in .NET.
     - Always try to declare a delegate under the namespace do not define it under other types like classes, structures etc.
     - The return type & method signature should match with delegate.
     - A delegate can point to multiple methods and chain calling is possible using delegates. When we invoke a delegate, all the 
       methods are invoked in the order in which the references of functions were assigned to it.
     - Every delegate you work with is derived from MulticastDelegate
    */


    public delegate double Ref(int first, int second);

    class Program
    {
        public double Add(int first, int second)
        {
            Console.WriteLine("The Result Of Addition = {0}", first + second);
            return first + second;
        }

        public double Subtract(int first, int second)
        {
            Console.WriteLine("The Result Of Subtraction = {0}", first - second);
            return first - second;
        }

        public double Multiply(int first, int second)
        {
            Console.WriteLine("The Result Of Multiplication = {0}", first * second);
            return first * second;
        }

        public double Divide(int first, int second)
        {
            Console.WriteLine("The Result Of Division = {0}", first / second);
            return first / second;
        }

        static void Main(string[] args)
        {
            Program Obj = new Program();
            Ref Caller = new Ref(Obj.Add);
            // Object reference is necessary when providing function name to Delegate.
            Caller = Caller + Obj.Multiply;
            Caller += Obj.Subtract;
            Caller += Obj.Divide;
            double Result = Caller(100, 10);
            Console.WriteLine("Result = {0} [ Gives the returning value of the last function call only ] ", Result);
            /* 
               All methods will be called in the sequence in which the references are assigned & only the value of last called
               method will be returned because it will override all the previous returned values of other methods. Similarly,
               the out parameters are also overriden when we call delegates of same return types or same out parameters.
               reference: https://docs.microsoft.com/en-us/dotnet/csharp/delegates-strongly-typed
               reference: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/using-delegates
            */
            Console.WriteLine();
            Caller = Caller - Obj.Add;
            Caller -= Obj.Multiply;
            // Removes references of functions from delegates.
            Caller(100, 10);
        }
    }
}
